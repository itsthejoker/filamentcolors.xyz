# Generated by Django 5.2.5 on 2025-09-25 02:18

from colormath.color_conversions import convert_color
from colormath.color_objects import LabColor, sRGBColor
from django.db import migrations


def backfill_lab_colors(apps, schema_editor):
    def rgb_to_lab(r: int, g: int, b: int):
        color = convert_color(sRGBColor(r, g, b, is_upscaled=True), LabColor)
        color.set_illuminant("d65")
        color.set_observer("10")
        return float(color.lab_l), float(color.lab_a), float(color.lab_b)

    def process_model(model_name: str):
        Model = apps.get_model("filamentcolors", model_name)
        # Iterate efficiently to avoid loading all rows at once
        for obj in Model.objects.all().iterator():
            L, a, b = rgb_to_lab(obj.rgb_r, obj.rgb_g, obj.rgb_b)
            # Save using update_fields to avoid touching other columns
            setattr(obj, "lab_l", L)
            setattr(obj, "lab_a", a)
            setattr(obj, "lab_b", b)
            obj.save(update_fields=["lab_l", "lab_a", "lab_b"])  # type: ignore

    # Apply to all three color libraries
    for name in ("Pantone", "PantonePMS", "RAL"):
        process_model(name)


class Migration(migrations.Migration):

    dependencies = [
        ("filamentcolors", "0056_pantone_lab_a_pantone_lab_b_pantone_lab_l_and_more"),
    ]

    operations = [
        migrations.RunPython(backfill_lab_colors),
    ]
