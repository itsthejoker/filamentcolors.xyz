{% extends 'modals/modal_base.html' %}

{% block id %}settingsModal{% endblock %}

{% block title %}Settings{% endblock %}

{% block extra_classes %}modal-dialog-scrollable{% endblock %}

{% block content %}
  <p>
    <strong>Note!</strong> These global filters will apply <strong>everywhere</strong>
    until you change them again or clear your cookies.
  </p>
  <p>
    <strong>Tip:</strong> You can use the search bar to find a specific filament type or
    manufacturer. The below settings will <strong>only</strong> show the selected types
    and manufacturers and will override the search bar and the quick filters.
  </p>
  <hr>
  <div class="container">
    <h5>Dark Mode</h5>
    <p>
      Dark mode is experimental and may not work perfectly. If you encounter any issues,
      please let us know.
    </p>
    <div class="container">
      <div class="ms-3 mt-3 form-check form-switch">
        <input
          style="margin-top: 7px"
          class="form-check-input"
          type="checkbox"
          id="darkModeSwitch"
          checked
          aria-label="Switch between light and dark mode"
        >
        <label class="form-check-label fs-5" for="darkModeSwitch">Dark Mode</label>
      </div>
    </div>
  </div>
  <hr>
  <div class="container">
    <h5>Types of filament to display:</h5>
    <div class="container">
      <div class="ms-3 mt-3" id="filamentTypeSettings">
        {% for t in settings_buttons %}
          <div class="form-check form-switch">
            <input class="form-check-input" style="margin-top: 7px" type="checkbox" id="{{ t.id }}"
                   checked="" autocomplete="off">
            <label class="form-check-label fs-5" for="{{ t.id }}"
            >{{ t.name }}</label>
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
  <hr>
  <div class="container">
    <h5>General</h5>
    <div class="container">
      <div class="ms-3 mt-3" id="filamentTypeSettings">
        <div class="form-check form-switch">
          <input class="form-check-input" style="margin-top: 7px" type="checkbox" id="unavailableCheckbox"
                 autocomplete="off">
          <label class="form-check-label fs-5" for="unavailableCheckbox">Show unavailable
            filaments</label>
        </div>
      </div>
    </div>
  </div>
  <hr>
  <div class="container">
  <h5>Colormatch</h5>
    <p>
      Sometimes you just need to see more colors! This changes the number of
      results returned by the colormatch page. Be aware that the higher you
      set this number, the longer it will take to return results.
    </p>
    <div class="container">
      <div class="ms-1 mt-4 position-relative" id="colorMatchSettings">
        <div class="d-flex">
          <h4 class="mt-3">
            <!-- this value is updated on page load -->
            <div class="badge text-bg-secondary"
                 style="width:42.2333px"
                 id="colorMatchResultCountLabel"
            >3</div>
          </h4>

          <div class="d-block">
            <!-- ms-2 is 0.5rem, but ms-3 is 1.0, so force 0.7 -->
            <label for="colorMatchResultCount"
                   class="form-label fs-5"
                   style="margin-left: 0.7rem"
            >Number of Color Match results to display</label>
            <input type="range"
                   class="form-range ms-2"
                   min="3"
                   max="12"
                   step="1"
                   value="3"
                   id="colorMatchResultCount"
                   oninput="updateColorMatchResultCount(this.value)"
            >
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="advancedSettingsContainer">
    <hr>
    <div class="container">
      <h5>Advanced Settings</h5>
    </div>
    <hr>
    <div class="container">
      <h5>Show ΔE Distances</h5>
      <p>
        The matches that we provide are found by calculating the
        <a href="https://en.wikipedia.org/wiki/Color_difference#CIEDE2000" target="_blank">ΔE (CIE) distance</a>
        and picking the colors that have the smallest distances. For certain
        situations, it can be useful to know the raw distance from the target
        color. The closer to 0 the number is, the closer of a match the measured
        color of the plastic is.
      </p>
      <p>
        <strong>Note:</strong> Enabling this will
        slightly increase the loading time for the site as these values are
        calculated.
      </p>
      <div class="container">
        <div class="ms-3 mt-3" id="filamentTypeSettings">
          <div class="form-check form-switch">
            <input class="form-check-input" style="margin-top: 7px" type="checkbox"
                   id="showDeltaEValues" autocomplete="off">
            <label class="form-check-label fs-5" for="showDeltaEValues"
            >Show ΔE Distances</label>
          </div>
        </div>
      </div>
    </div>
    <hr>

    <div class="container">
      <h5>Toggle Specific Manufacturers</h5>
      <div class="container d-grid">
        <button type="button"
                id="showHideMfrsButton"
                class="btn btn-secondary showall"
                onclick="toggleShowHideMfrs()"
        >Unselect All
        </button>
      </div>
      <div class="container">
        <div class="ms-3 mt-3" id="mfrSettings">
          {% for m in manufacturers %}
            <div class="form-check form-switch">
              <input class="form-check-input" style="margin-top: 7px" type="checkbox" id="m{{ m.id }}"
                     checked="" autocomplete="off">
              <label class="form-check-label fs-5" for="m{{ m.id }}"
              >{{ m.name }}</label>
            </div>
          {% endfor %}
        </div>
      </div>
    </div>
  </div>
{% endblock content %}

{% block footer %}
  <button type="button"
          class="btn btn-secondary mb-0"
          id="advancedSettingsButton"
          onclick="showHideAdvanced()">
    Show Advanced
  </button>
  <button type="button"
          class="btn btn-primary mb-0"
          onclick="saveSettings()">
    Save changes
  </button>
{% endblock footer %}

{% block extra %}
  <script>
    function toggleShowHideMfrs() {
      const mfr = $("#mfrSettings");
      // for bootstrap 5 ditching jquery:
      // mfr = Array.from(document.getElementsByClassName("mfrSettings")).reverse()

      const btn = $("#showHideMfrsButton");
      btn.removeClass("focus");

      let showAllBool = btn.hasClass("showall");

      btn[0].innerText = (showAllBool ? "Select All" : "Deselect All");

      mfr.children().each(
        function(_, a) {
          a = $(a).children().first();
          if (a.is(":checked") === showAllBool) {
            a.prop("checked", !a.prop("checked"));
          }
          if (a.hasClass("focus")) {
            a.removeClass("focus");
          }
        }
      );
      btn.toggleClass("showall");
    }

    function showHideAdvanced() {
      $("#advancedSettingsContainer").toggle();
      const btn = $("#advancedSettingsButton");
      btn.text(btn.text().includes("Show") ? "Hide Advanced" : "Show Advanced");
    }

    function saveSettings() {
      let el = $("#filamentTypeSettings");
      let fs = "";

      let showDelta = $("#showDeltaEValues").is(":checked");

      let mfr = $("#mfrSettings");
      let mfr_list = "";

      let colorMatchResultCount = $("#colorMatchResultCount").val();

      $.each(
        el.children(), function(count, value) {
          value = $(value).children().first();
          fs = fs + value.attr("id") + "-" + value.is(":checked") + "_";
        });

      $.each(
        mfr.children(), function(count, value) {
          value = $(value).children().first();
          if (!(value.is(":checked"))) {
            mfr_list = mfr_list + value.attr("id").slice(1) + "-";
          }
        });

      if (fs.includes("true") === false) {
        Toastify({
          text: "It looks like all filament types have been disabled." +
            " Please enable at least one type.",
          duration: 5000,
          backgroundColor: "#d9534f"
        }).showToast();
        return;
      }

      if (mfr_list.split("-").slice(0, -1).length === mfr.children().length) {
        Toastify({
          text: "It looks like all manufacturers have been disabled." +
            " Please enable at least one.",
          duration: 5000,
          backgroundColor: "#d9534f"
        }).showToast();
        return;
      }
      createCookie("show-types", fs, 365);

      // the radio selector
      createCookie("show-un",
        $("#unavailableCheckbox").is(":checked"),
        365
      );
      createCookie("show-delta-e-values", showDelta, 365);
      createCookie("mfr-blacklist", mfr_list, 365);
      createCookie("number-of-colormatch-results", colorMatchResultCount, 365);

      // settings have been saved, time to actually load them
      window.location.reload();
    }

    function loadSettings() {
      const fsettings = readCookie("show-types");
      const dsetting = readCookie("show-un");
      const msettings = readCookie("mfr-blacklist");
      const showdeltaesetting = readCookie("show-delta-e-values");
      const colorMatchResultCount = readCookie("number-of-colormatch-results");

      {# Using a double equals for all of these kills me here, but it #}
      {# CANNOT be a !== because javascript sucks and it breaks. #}
      if (fsettings != null) {
        $.each(fsettings.split("_").slice(0, -1), function(count, value) {
          var [id, bool] = value.split("-");
          if (bool === "false") {
            let obj = $("#filamentTypeSettings #" + id);
            obj.prop("checked", !obj.prop("checked"));
          }
        });
      }

      // default to not showing unavailable filament
      let unavailablecb = $("#unavailableCheckbox");
      if (dsetting != null) {
        unavailablecb.prop("checked", JSON.parse(dsetting.toLowerCase()));
      }

      if (msettings != null) {
        {# a hyphen separated list of ids #}
        const mfrSettings = $("#mfrSettings");
        ids = msettings.split("-").slice(0, -1);
        $.each(mfrSettings.children(), function(count, value) {
          value = $(value).children().first();
          if (ids.includes(value.attr("id").slice(1))) {
            let obj = mfrSettings.find("#" + value.attr("id"));
            obj.prop("checked", !obj.prop("checked"));
          }
        });
      }
      if (showdeltaesetting != null) {
        const el = $("#showDeltaEValues");
        el.prop("checked", JSON.parse(showdeltaesetting.toLowerCase()));
      }
      if (colorMatchResultCount != null) {
        const el = $("#colorMatchResultCount");
        el.val(colorMatchResultCount);
        updateColorMatchResultCount(colorMatchResultCount);
      }
    }

    document.addEventListener("DOMContentLoaded", (event) => {
      const htmlElement = document.documentElement;
      const switchElement = document.getElementById("darkModeSwitch");
      const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)").matches;
      const currentTheme = localStorage.getItem("bsTheme") || (prefersDarkScheme ? "dark" : "light");

      htmlElement.setAttribute("data-bs-theme", currentTheme);
      switchElement.checked = currentTheme === "dark";

      switchElement.addEventListener("change", function() {
        const newTheme = this.checked ? "dark" : "light";
        htmlElement.setAttribute("data-bs-theme", newTheme);
        localStorage.setItem("bsTheme", newTheme);
      });
    });

    function updateColorMatchResultCount(val) {
      const el = document.getElementById("colorMatchResultCountLabel");
      el.innerText = val;
    }

    $(document).ready(function() {
      loadSettings();
      // hide the advanced settings
      $("#advancedSettingsContainer").toggle();
    });
  </script>
{% endblock extra %}
