<div class="container mt-4">
  <div class="row justify-space-between py-2">
    <div class="col-lg-4 mx-auto">
      <div class="input-group input-group-dynamic mb-4">
        <span class="input-group-text"><span class="icon-search"></span></span>
        <input
          class="form-control"
          id="filterInput"
          placeholder="Search Library..."
          type="text"
          aria-label="Search"
          value="{{ search_prefill }}"
          {# Trigger on both normal interactions with the user or if the event #}
          {# is triggered for the search bar itself. #}
          hx-trigger="keyup changed delay:0.4s, fireSearch from:body"
          hx-get="{{ request.path }}"
          name="f"
          hx-vals="js:{...populateFilters()}"
          hx-target="#swatch-container"
          hx-swap="innerHTML"
          hx-headers='{ "X-Searchbar": "true" }'
        >
      </div>
    </div>
  </div>
  {% if 'manufacturer' not in request.path %}
    <div class="text-center mb-4">
      <div class="mb-2">Quick filters:</div>
      <div class="gap-1">
        <button
          type="button"
          id="cfFilterModalButton"
          class="btn btn-outline-danger bg-gradient"
          data-bs-toggle="modal"
          data-bs-target="#cfFilterModal"
        >Color Family
        </button>
        <button
          type="button"
          id="ftFilterModalButton"
          class="btn btn-outline-success bg-gradient"
          data-bs-toggle="modal"
          data-bs-target="#ftFilterModal"
        >Filament Type
        </button>
        <button
          type="button"
          id="mfrFilterModalButton"
          class="btn btn-outline-primary bg-gradient"
          data-bs-toggle="modal"
          data-bs-target="#mfrFilterModal"
        >Manufacturer
        </button>
        <button
          type="button"
          id="tdFilterModalButton"
          class="btn btn-outline-primary bg-gradient"
          data-bs-toggle="modal"
          data-bs-target="#tdFilterModal"
        >TD
        </button>
      </div>
      <div>
        <button
          id="clearAllFiltersButton"
          class="btn btn-outline-secondary d-none mt-2"
          onclick="clearAllFilters()"
        >Clear Active Filters
        </button>

      </div>
    </div>
  {% endif %}
</div>

<!-- Color Family Filter Modal -->
<div class="modal fade" id="cfFilterModal" tabindex="-1" aria-labelledby="cfFilterModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="cfFilterModalLabel">Filter by Color Family</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="list-group" id="cfFilterListGroup">
          <div
            id="filterCfNone"
            class="list-group-item list-group-item-action active"
            onclick="clearCfFilter()"
          >
            No Filter
          </div>
          {% for c in color_family %}
            <div
              id="filter-{{ c.1|lower }}"
              data-cf="{{ c.1|lower }}"
              class="list-group-item list-group-item-action cfFilterEntry"
              onclick="selectCfFilter(this)"
            >
              {{ c.1 }}
            </div>
          {% endfor %}
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Filament Type Filter Modal -->
<div class="modal fade" id="ftFilterModal" tabindex="-1" aria-labelledby="ftFilterModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="ftFilterModalLabel">Filter by Filament Type</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="list-group" id="ftFilterListGroup">
          <div
            id="filterFtNone"
            class="list-group-item list-group-item-action active"
            onclick="clearFtFilter()"
          >
            No Filter
          </div>
          {% for ft in settings_buttons %}
            <div
              id="filter-{{ ft.slug }}"
              data-ft-slug="{{ ft.slug }}"
              class="list-group-item list-group-item-action ftFilterEntry"
              onclick="selectFtFilter(this)"
            >
              {{ ft.name }}
            </div>
          {% endfor %}
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>


<!-- Manufacturer Filter Modal -->
<div class="modal fade" id="mfrFilterModal" tabindex="-1" aria-labelledby="mfrFilterModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="mfrFilterModalLabel">Filter by Manufacturer</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="input-group input-group-dynamic mb-4">
          <span class="input-group-text"><span class="icon-search"></span></span>
          <input
            class="form-control"
            id="mfrFilterInput"
            placeholder="Got someone in mind?"
            type="text"
            aria-label="Search"
          >
        </div>
        <div class="list-group" id="mfrFilterListGroup">
          <div
            id="filterMfrNone"
            class="list-group-item list-group-item-action active"
            onclick="clearMfrFilter()"
          >
            No Filter
          </div>
          {% for mfr in manufacturers %}
            <div
              id="filter-{{ mfr.slug }}"
              data-mfr-slug="{{ mfr.slug }}"
              class="list-group-item list-group-item-action mfrFilterEntry"
              onclick="selectMfrFilter(this)"
            >
              {{ mfr.get_display_name }}
            </div>
          {% endfor %}
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- TD Filter Modal -->
<div class="modal fade" id="tdFilterModal" tabindex="-1" aria-labelledby="tdFilterModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="tdFilterModalLabel">Filter by TD</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>
          <strong>Transmission Distance</strong> (TD) values are a measure of how much light passes
          through the filament. This is mostly used with
          <a href="https://shop.thehueforge.com/" target="_blank">software like HueForge</a>, but
          also gives you a good idea of how translucent your prints will be. The numbers range
          from 0 to 100, where 0 blocks all light and 100 is completely clear.
        </p>
        <p>
          Note: we're working on getting this value for more filaments, but right now there is only
          a small portion of the library with this data.
        </p>
        <ul class="nav nav-pills mb-3 nav-justified" id="tdValuesTabs" role="tablist">
          <li class="nav-item ps-0" role="presentation">
            <button 
              class="nav-link active" 
              id="tdSliderTab" 
              data-bs-toggle="pill" 
              data-bs-target="#pillSlider" 
              type="button" 
              role="tab" 
              aria-controls="pillSlider" 
              aria-selected="true">Sliders</button>
          </li>
          <li class="nav-item" role="presentation">
            <button 
              class="nav-link" 
              id="tdTextTab" 
              data-bs-toggle="pill" 
              data-bs-target="#pillText" 
              type="button" 
              role="tab" 
              aria-controls="pillText" 
              aria-selected="false"
            >Text</button>
          </li>
        </ul>
        <div class="tab-content mb-3" id="tdValuesTabsContent">
          <div 
            class="tab-pane fade show active" 
            id="pillSlider" 
            role="tabpanel" 
            aria-labelledby="tdSliderTab" 
            tabindex="0"
          >
            <td-min-range></td-min-range>
            <td-max-range></td-max-range>
          </div>
          <div 
            class="tab-pane fade" 
            id="pillText" 
            role="tabpanel" 
            aria-labelledby="tdTextTab" 
            tabindex="0"
          >
          <td-min-text></td-min-text>
          <div class="input-group mb-3 has-validation">
            <span class="input-group-text" id="tdMaxTextAddon">TD Max</span>
            <input 
              type="text" 
              id="tdMaxTextInput"
              class="form-control" 
              placeholder="100" 
              aria-label="tdMaxTextLabel" 
              aria-describedby="tdMaxTextAddon"
              onkeyup="updateTdMaxText(this)"
            >
            <div class="invalid-feedback" id="tdMaxTextInputFeedback">
              Please enter a number between 0 and 100.
            </div> 
          </div>                    
        </div>
        </div>
        <div class="text-center">
          <div
            id="filterTDNone"
            class="btn btn-primary"
            onclick="clearTDFilter()"
          >
            Reset Filter
          </div>
          <div
          id="applyTdFilter",
          class="btn btn-success"
          onclick="applyTdFilter()"
          >Apply Filter</div>

        </div>
        
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
  class TdTextComponent extends HTMLElement {
    constructor() {
      super();
      this.textInput = null;
      this.errorMessage = null;
    }

    setErrorVisibility(visible) {
      // visible is a boolean
      const $el = $(this);
      $el.toggleClass("is-valid", visible);
      $el.toggleClass("is-invalid", !visible);
    }

    validateTdTextBox() {
      const $el = $(this);
      const value = $el.val();
      return $.isNumeric(value) && value >= 0 && value <= 100;
    }
  }

  class TdRangeComponent extends HTMLElement {
    constructor() {
      super();
      this.rangeInput = null;
      this.valueLabel = null;
    }

    roundToOneDecimal(value) {
      return Math.round(value * 10) / 10;
    }

    getValue() {
      if (!this.rangeInput) {
        throw new Error('Range input is not initialized.');
      }
      return this.roundToOneDecimal(parseFloat(this.rangeInput.value));
    }

    setValue(value) {
      if (!this.rangeInput || !this.valueLabel) {
        throw new Error('Range input or value label is not initialized.');
      }
      const parsedValue = parseFloat(value);
      if (isNaN(parsedValue)) {
        throw new Error('Invalid value. Please provide a valid float.');
      }
      const roundedValue = this.roundToOneDecimal(parsedValue);
      this.rangeInput.value = roundedValue;
      this.valueLabel.textContent = roundedValue.toString();
      this.rangeInput.dispatchEvent(new Event('input', { bubbles: true }));
    }
  }

  class TdMinRange extends TdRangeComponent {
    constructor() {
      super();
      this.innerHTML = `
        <label for="tdMinRange" class="form-label">
          TD Min: <span class="badge text-bg-secondary" id="tdMinValueLabel">0</span>
        </label>
        <input
          type="range"
          class="form-range"
          value="0"
          min="0"
          max="100"
          step="0.1"
          id="tdMinRange"
        >
      `;

      this.rangeInput = document.getElementById('tdMinRange');
      this.valueLabel = document.getElementById('tdMinValueLabel');
      this.rangeInput.addEventListener('input', this.updateTdMinRange.bind(this));
    }

    updateTdMinRange(event) {
      if (this.getValue() === 100.0) {
        this.setValue(99.9)
      }

      let localVal = this.getValue();

      this.valueLabel.textContent = localVal.toString();

      let maxRange = document.querySelector('td-max-range')
      if (localVal > maxRange.getValue()) {
        maxRange.setValue(roundToOneDecimal(localVal + 0.1));
      }
    }
  }

  class TdMaxRange extends TdRangeComponent {
    constructor() {
      super();
      this.innerHTML = `
        <label for="tdMaxRange" class="form-label">
          TD Max: <span class="badge text-bg-secondary" id="tdMaxValueLabel">100</span>
        </label>
        <input
          type="range"
          class="form-range"
          value="100"
          min="0"
          max="100"
          step="0.1"
          id="tdMaxRange"
        >
      `;

      this.rangeInput = document.getElementById('tdMaxRange');
      this.valueLabel = document.getElementById('tdMaxValueLabel');
      this.rangeInput.addEventListener('input', this.updateTdMaxRange.bind(this));
    }

    updateTdMaxRange(event) {
      if (this.getValue() === 0.0) {
        this.setValue(0.1)
      }

      let localVal = this.getValue();

      this.valueLabel.textContent = localVal.toString();

      let minRange = document.querySelector('td-min-range')
      if (localVal < minRange.getValue()) {
        minRange.setValue(roundToOneDecimal(localVal - 0.1));
      }
    }
  }

  class TdMinText extends TdTextComponent {
    constructor() {
      super();
      this.innerHTML = `
        <div class="input-group mb-3 has-validation">
          <span class="input-group-text" id="tdMinTextAddon">TD Min</span>
          <input
            type="text"
            id="tdMinTextInput"
            class="form-control"
            placeholder="0"
            aria-label="tdMinTextLabel"
            aria-describedby="tdMinTextAddon"
          >
          <div class="invalid-feedback" id="tdMinTextInputFeedback">
            Please enter a number between 0 and 100.
          </div>
        </div>
      `;

      this.textInput = document.getElementById('tdMinTextInput');
      this.errorMessage = document.getElementById('tdMinTextInputFeedback');
      this.rangeInput.addEventListener('onkeyup', this.updateTdMinText.bind(this));
    }

    updateTdMinText(event) {
      if (this.getValue() === 100.0) {
        this.setValue(99.9)
      }

      let localVal = this.getValue();

      this.valueLabel.textContent = localVal.toString();

      let maxRange = document.querySelector('td-max-range')
      if (localVal > maxRange.getValue()) {
        maxRange.setValue(roundToOneDecimal(localVal + 0.1));
      }
    }
  }

  function updateTdMinText(el, propogate=true) {
    const errorMessage = document.getElementById("tdMinTextInputFeedback");
    if (!(validateTdTextBox(el))) {
      errorMessage.textContent = "Please enter a number between 0 and 100."
      return
    }
    const maxText = document.getElementById("tdMaxTextInput");
    if (parseFloat(el.value) > parseFloat(maxText.value)) {
      errorMessage.textContent = "Number must be smaller than TD Max."
      validateTdTextBox(el, force=true, forcedValue=false)
    }
    
    if (propogate) {
      // normally we want to update the range, but if the range forced
      // the update, we don't want to push the update back and pingpong
      // around
      const minRange = document.getElementById("tdMinRange");
      minRange.value = el.value;
      updateTdMinRange(minRange);
    }
  }

  function updateTdMaxText(el, propogate=true) {
    const errorMessage = document.getElementById("tdMaxTextInputFeedback");
    if (!(validateTdTextBox(el))) {
      errorMessage.textContent = "Please enter a number between 0 and 100."
      return
    }
    const minText = document.getElementById("tdMinTextInput");
    if (parseFloat(el.value) < parseFloat(minText.value)) {
      errorMessage.textContent = "Number must be larger than TD Min."
      validateTdTextBox(el, force=true, forcedValue=false)
    }

    if (propogate) {
      const maxRange = document.getElementById("tdMaxRange");
      maxRange.value = el.value;
      updateTdMaxRange(maxRange);
    }
  }

  function roundToOneDecimal(value) {
    // this is so stupid. this language is stupid. Why can I not round floats???
    return Math.round(value * 10) / 10;
  }

  function updateTdMinRange(el) {
    const minRange = el;
    const minText = document.getElementById("tdMinTextInput");
    const maxRange = document.getElementById("tdMaxRange");
    let minRangeFloat = roundToOneDecimal(parseFloat(minRange.value));
    let maxRangeFloat = roundToOneDecimal(parseFloat(maxRange.value));

    if (minRangeFloat === 100.0) {
      minRangeFloat = 99.9;
      minRange.value = minRangeFloat;
    }

    document.getElementById("tdMinValueLabel").textContent = minRangeFloat.toString();
    minText.value = minRangeFloat.toString();
    updateTdMinText(minText, propogate=false);

    if (minRangeFloat > maxRangeFloat) {
      maxRange.value = roundToOneDecimal(minRangeFloat + 0.1);
      updateTdMaxRange(maxRange, propogate=false);
    }
  }

  function updateTdMaxRange(el) {
    const maxRange = el;
    const maxText = document.getElementById("tdMaxTextInput");
    const minRange = document.getElementById("tdMinRange");
    let minRangeFloat = roundToOneDecimal(parseFloat(minRange.value));
    let maxRangeFloat = roundToOneDecimal(parseFloat(maxRange.value));
    
    if (maxRangeFloat === 0.0) {
      maxRangeFloat = 0.1;
      maxRange.value = maxRangeFloat;
    }

    document.getElementById("tdMaxValueLabel").textContent = maxRangeFloat.toString();
    maxText.value = maxRangeFloat.toString();
    updateTdMaxText(maxText, propogate=false);
    if (maxRangeFloat < minRangeFloat) {
      minRange.value = roundToOneDecimal(maxRangeFloat - 0.1);
      updateTdMinRange(minRange, propogate=false);
    }
  }

  function hideModal(modalId) {
    const modal = bootstrap.Modal.getOrCreateInstance(document.getElementById(modalId));
    modal.hide();
  }

  function populateFilters() {
    const filters = {};
    const filterTypes = ["cf", "mfr", "ft"];

    filterTypes.forEach(type => {
      const filterValue = getFilters(type);
      if (filterValue) {
        filters[type] = filterValue;
      }
    });

    return filters;
  }


  function getFilters(filterName) {
    try {
      if (window.quickfiltersToClear.includes(filterName)) {
        return "";
      }
      if (filterName in window.quickfilters) {
        return window.quickfilters[filterName];
      }
      const filterData = JSON.parse(JSON.parse(document.getElementById("filterValues").textContent));
      let resp = filterData[filterName];
      if (!resp) {
        return "";
      }
      return filterData[filterName];
    } catch (e) {
      return "";
    }
  }

  function clearMfrFilter(goNow = true) {
    $("#mfrFilterModalButton")
      .text("Manufacturer")
      .removeClass("btn-primary")
      .addClass("btn-outline-primary");
    $("#filterMfrNone").addClass("active");
    $(".mfrFilterEntry").removeClass("active");
    hideModal("mfrFilterModal");
    window.quickfiltersToClear.push("mfr");
    if (goNow) {
      document.body.dispatchEvent(new Event("fireSearch"));
    }
  }

  function selectMfrFilter(el) {
    window.quickfilters["mfr"] = el.getAttribute("data-mfr-slug");
    $(".mfrFilterEntry").removeClass("active");
    $(el).addClass("active");
    hideModal("mfrFilterModal");
    document.body.dispatchEvent(new Event("fireSearch"));
  }

  function clearFtFilter(goNow = true) {
    $("#ftFilterModalButton")
      .text("Filament Type")
      .removeClass("btn-success")
      .addClass("btn-outline-success");
    $("#filterFtNone").addClass("active");
    $(".ftFilterEntry").removeClass("active");
    hideModal("ftFilterModal");
    window.quickfiltersToClear.push("ft");
    if (goNow) {
      document.body.dispatchEvent(new Event("fireSearch"));
    }
  }

  function selectFtFilter(el) {
    window.quickfilters["ft"] = el.getAttribute("data-ft-slug");
    $(".ftFilterEntry").removeClass("active");
    $(el).addClass("active");
    hideModal("ftFilterModal");
    document.body.dispatchEvent(new Event("fireSearch"));
  }

  function clearCfFilter(goNow = true) {
    $("#cfFilterModalButton")
      .text("Color Family")
      .removeClass("btn-danger")
      .addClass("btn-outline-danger");
    $("#filterCfNone").addClass("active");
    $(".cfFilterEntry").removeClass("active");
    hideModal("cfFilterModal");
    window.quickfiltersToClear.push("cf");
    if (goNow) {
      document.body.dispatchEvent(new Event("fireSearch"));
    }
  }

  function selectCfFilter(el) {
    window.quickfilters["cf"] = el.getAttribute("data-cf");
    $(".cfFilterEntry").removeClass("active");
    $(el).addClass("active");
    hideModal("cfFilterModal");
    document.body.dispatchEvent(new Event("fireSearch"));
  }

  $("#mfrFilterInput").on("keyup", function() {
    let value = $(this).val().toLowerCase();
    $("#mfrFilterListGroup .mfrFilterEntry").filter(function() {
      $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
    });
  });

  function updateClearAllButton() {
    if (getFilters("cf") || getFilters("mfr") || getFilters("ft") || window.quickfiltersToClear.length > 0) {
      $("#clearAllFiltersButton").removeClass("d-none");
    } else {
      $("#clearAllFiltersButton").addClass("d-none");
    }
  }

  function clearAllFilters() {
    window.quickfilters = {};
    window.quickfiltersToClear = [];
    clearFtFilter(false);
    clearCfFilter(false);
    clearMfrFilter(false);
    document.body.dispatchEvent(new Event("fireSearch"));
    updateClearAllButton();
  }

  function showHideHexColorWarning(el) {
    const hexColorSearchAlert = document.getElementById("hexColorSearchAlert");
    if (!hexColorSearchAlert) {
      return;
    }
    $.isHexColor(el.value) ? hexColorSearchAlert.classList.remove("d-none") : hexColorSearchAlert.classList.add("d-none");
  }

  $(document).ready(function() {
    const el = document.getElementById("filterInput");
    el.addEventListener("keyup", function() {
      showHideHexColorWarning(this)
    });
  });
  
  htmx.onLoad(function(t) {
    showHideHexColorWarning(document.getElementById("filterInput"));
    window.quickfilters = {};
    window.quickfiltersToClear = [];
    updateClearAllButton();
    const currentUrl = new URL(window.location.href);

    // set the display information for the filter modals
    if (currentUrl.searchParams.has("cf")) {
      const filterEntry = $(`#filter-${currentUrl.searchParams.get("cf")}`);
      if (!filterEntry.length) {
        $("#filterCfNone").addClass("active");
      } else {
        $("#filterCfNone").removeClass("active");
        filterEntry.addClass("active");
        $("#cfFilterModalButton")
          .text(filterEntry.text())
          .removeClass("btn-outline-danger")
          .addClass("btn-danger");
      }
    } else {
      $("#filterCfNone").addClass("active");
      $(".cfFilterEntry").each(function() {
        $(this).removeClass("active");
      });
    }

    if (currentUrl.searchParams.has("mfr")) {
      const filterEntry = $(`#filter-${currentUrl.searchParams.get("mfr")}`);
      if (!filterEntry.length) {
        $("#filterMfrNone").addClass("active");
      } else {
        $("#filterMfrNone").removeClass("active");
        filterEntry.addClass("active");
        $("#mfrFilterModalButton")
          .text(filterEntry.text())
          .removeClass("btn-outline-primary")
          .addClass("btn-primary");
      }
    } else {
      $("#filterMfrNone").addClass("active");
      $(".mfrFilterEntry").each(function() {
        $(this).removeClass("active");
      });
    }

    if (currentUrl.searchParams.has("ft")) {
      const filterEntry = $(`#filter-${currentUrl.searchParams.get("ft")}`);
      if (!filterEntry.length) {
        $("#filterFtNone").addClass("active");
      } else {
        $("#filterFtNone").removeClass("active");
        filterEntry.addClass("active");
        $("#ftFilterModalButton")
          .text(filterEntry.text())
          .removeClass("btn-outline-success")
          .addClass("btn-success");
      }
    } else {
      $("#filterFtNone").addClass("active");
      $(".ftFilterEntry").each(function() {
        $(this).removeClass("active");
      });
    }
  });

  customElements.define('td-min-range', TdMinRange);
  customElements.define('td-max-range', TdMaxRange);
</script>
