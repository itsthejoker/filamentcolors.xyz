{% load static %}
{% load django_htmx %}
{% load plausible %}

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">

<script src="{% static 'vendored/js/htmx.min.js' %}?v=1.9.9"></script>
<script src="{% static 'vendored/js/diomorph-ext.min.js' %}"></script>
{% django_htmx_script %}
<link rel="stylesheet" href="{% static 'vendored/css/baguetteBox.min.css' %}">
<link rel="stylesheet" href="{% static 'vendored/css/material_icons.css' %}">
<link rel="stylesheet" href="{% static 'vendored/css/toastify.css' %}">
<link rel="stylesheet" href="{% static 'vendored/icomoon/style.css' %}">
<link rel="stylesheet" href="{% static 'vendored/material-kit-pro-html-v3.0.3/assets/css/nucleo-icons.css' %}">
<link rel="stylesheet" href="{% static 'vendored/material-kit-pro-html-v3.0.3/assets/css/nucleo-svg.css' %}">
<link rel="stylesheet" href="{% static 'vendored/material-kit-pro-html-v3.0.3/assets/css/material-kit-pro.css' %}?v=3">
<link rel="stylesheet" href="{% static 'css/main.css' %}?v=5">
<link rel="preconnect" href="https://fonts.googleapis.com">

<style>
    @font-face {
      font-family: "Roboto";
      src: url("{% static 'vendored/Roboto-Regular.ttf' %}") format("truetype");
    }
</style>

{% if not request.user.is_authenticated %}
    {% plausible script='script.outbound-links.js' %}
{% endif %}

<script src="{% static 'vendored/material-kit-pro-html-v3.0.3/assets/js/material-kit-pro.min.js' %}"></script>
<script src="{% static 'vendored/js/jquery-3.4.1.min.js' %}"></script>
<script src="{% static 'vendored/js/baguetteBox.min.js' %}"></script>
<script src="{% static 'vendored/js/bootstrap.bundle.min.js' %}"></script>
<script src="{% static 'vendored/js/masonry.min.js' %}"></script>
<script src="{% static 'vendored/js/long_press.js' %}" async defer></script>
<script src="{% static 'vendored/js/jscolor.min.js' %}" async></script>
<script src="{% static 'vendored/js/color.global.min.js' %}"></script>

<script src="{% static 'vendored/js/contract.js' %}"></script>
<script src="{% static 'vendored/js/dispatcher.js' %}"></script>
<script type="text/javascript" src="{% static 'vendored/js/toastify.min.js' %}" async defer></script>
<script src="{% static 'js/cookies/cookie.js' %}?v=1"></script>

<script type="text/javascript" src="{% static "js/emailmagic.js" %}?v=2" async defer></script>
<script src="{% static 'js/multistepmodal.js' %}" async></script>

<link rel="apple-touch-icon" sizes="180x180" href="{% static 'favicons/apple-touch-icon.png' %}?v=QEJXGyWNR2">
<link rel="icon" type="image/png" sizes="32x32" href="/static/favicons/favicon-32x32.png?v=QEJXGyWNR2">
<link rel="icon" type="image/png" sizes="16x16" href="/static/favicons/favicon-16x16.png?v=QEJXGyWNR2">
<link rel="manifest" href="/static/favicons/site.webmanifest?v=QEJXGyWNR2">
<link rel="mask-icon" href="/static/favicons/safari-pinned-tab.svg?v=QEJXGyWNR2" color="#5bbad5">
<link rel="shortcut icon" href="/static/favicons/favicon.ico?v=QEJXGyWNR2">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="msapplication-config" content="/static/favicons/browserconfig.xml?v=QEJXGyWNR3">
<meta name="theme-color" content="#ffffff">

<script>
    let $deck, $msnry;
    htmx.onLoad(function (t) {
        tooltips();
        lazyloadimages();

        $deck = $('#deck-of-many-things');
        if ($deck.length) {
            // reinit masonry if we need to
            $msnry = $deck.masonry(
              {
                "percentPosition": true,
                "itemSelector": ".swatchbox",
            })
            window.msnry = $msnry.data('masonry')
        }
        if (window.collectionModeEnabled) {
          preselect_items(window.multiselectArray);
        }
    })
    
    function showToast(message) {
        Toastify({
            text: message,
            duration: 5000,
            backgroundColor: "#4caf50"
        }).showToast();
    }

    function showToastError(message) {
        Toastify({
            text: message,
            duration: 5000,
            backgroundColor: "#d9534f"
        }).showToast();
    }

    htmx.on("htmx:beforeOnLoad", function(evt) {
        // wipe the tooltips if they're loaded so that they don't screw
        // up the new page
        if (window.tooltipList) {
            window.tooltipList.forEach((tooltip) => {
                tooltip.dispose()
            });
        }
    })

    htmx.on("htmx:responseError", function(evt) {
        if (evt.detail.xhr.status === 701) {
            showToastError("That doesn't look like a valid color. Try again?")
        } else if (evt.detail.xhr.status === 702) {
            showToastError("Missing color code - can't work on what I can't see!")
        } else {
            Toastify({
                text: evt.detail.xhr.responseText + `<p>Status: ${evt.detail.xhr.status}</p>`,
                className: "text-black text-center",
                duration: 20000,
                backgroundColor: "#fff"
            }).showToast();
        }
    })

    htmx.on("htmx:afterRequest", function(evt) {
      const element = evt.detail.elt;
      if (element.id === "filterInput") {
        $deck.masonry('destroy');
      }
    })

    htmx.on("htmx:afterSwap", function(evt) {
        const element = evt.detail.elt;
        if (!$deck) {
            // on first load, we need to finish initializing everything
            // before we can use this, so abort and wait for the next one
            $deck = $('#deck-of-many-things');
            return
        }
        if (element.classList.contains("swatchbox")) {
          // infinite scroll loading
          let newSwatches = $deck.find('.swatchbox:not([style])');
          if (newSwatches.length) {
            $deck.masonry('appended', newSwatches);
          }
        }
    })

    function lazyloadimages() {
        const lazyImages = [].slice.call(document.querySelectorAll("img.lazy-load-image"));

        if ("IntersectionObserver" in window) {
            let lazyImageObserver = new IntersectionObserver(function (entries, observer) {
                entries.forEach(function (entry) {
                    if (entry.isIntersecting) {
                        let lazyImage = entry.target;
                        lazyImage.src = lazyImage.dataset.src;
                        lazyImage.classList.remove("lazy");
                        lazyImageObserver.unobserve(lazyImage);
                    }
                });
            });

            lazyImages.forEach(function (lazyImage) {
                lazyImageObserver.observe(lazyImage);
            });
        } else {
            console.log("Image loading fallback to standard lazyload")
            let images = $(".lazy-load-image");
            images.each(function () {
                let image = $(this);
                image.attr("loading", "lazy").attr("src", image.data()['src'])
            })
        }
    }

    function tooltips() {
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
        window.tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
    }

    htmx.config.historyCacheSize = 10;
    htmx.config.refreshOnHistoryMiss = true;
    htmx.config.useTemplateFragments = true;
    htmx.config.globalViewTransitions = true;

    // https://stackoverflow.com/a/920322
    $.fn.exists = function () {
        return this.length !== 0;
    }

    // https://stackoverflow.com/a/8027526
    $.isHexColor = hex => typeof hex === 'string' && hex.length === 6 && !isNaN(Number('0x' + hex))

    $(document).ready(function () {
        jscolor.presets.default = {
            format: 'hex'
        };
    })

</script>
