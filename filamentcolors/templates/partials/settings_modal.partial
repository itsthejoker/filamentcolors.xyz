<div class="modal fade" tabindex="-1" role="dialog" id="settingsModal" aria-labelledby="Settings Menu">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Settings</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>
                    Whatever you change here will be saved locally; remember that whenever your browser
                    cookies are cleared, these will have to be set again.
                </p>
                <hr>
                <div class="container">
                    <h5>Types of filament to display:</h5>
                    <div class="btn-group-toggle container" data-toggle="button" id="filamentTypeSettings">
                        {% for t in settings_buttons %}
                            <label class="btn btn-outline-secondary active btn-block" id="{{ t.id }}">
                                <input type="checkbox" checked autocomplete="off">{{ t.name }}
                            </label>
                        {% endfor %}
                    </div>
                </div>
                <hr>
                <div class="container">
                    <h5>Show unavailable filaments?</h5>
                    <div class="btn-group btn-group-toggle container d-flex"
                         role="group"
                         data-toggle="buttons"
                         id="showUnavailableSetting"
                    >
                        <label class="btn btn-outline-secondary active w-100" id="showDC">
                            <input type="radio" name="options" autocomplete="off" checked>Show
                        </label>
                        <label class="btn btn-outline-secondary w-100" id="hideDC">
                            <input type="radio" name="options" autocomplete="off">Hide
                        </label>
                    </div>
                </div>
                <div id="advancedSettingsContainer">
                    <hr>
                    <div class="container">
                        <h5>Toggle Specific Manufacturers</h5>
                        <div class="container">
                            <button type="button"
                                    id="showHideMfrsButton"
                                    class="btn btn-block btn-secondary showall"
                                    onclick="toggleShowHideMfrs()"
                            >Unselect All
                            </button>
                        </div>
                        <div class="row container fix-margin">
                            {% for m in manufacturers %}
                                <div class="btn-group-toggle col-sm-6 text-xs-center bump-down mfrSettings"
                                     data-toggle="buttons">
                                    <label class="btn btn-outline-secondary active btn-block" id="{{ m.id }}">
                                        <input type="checkbox" checked="" autocomplete="off">{{ m.name }}</label>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button"
                        class="btn btn-outline-secondary mr-auto"
                        id="advancedSettingsButton"
                        onclick="showHideAdvanced()">
                    Advanced
                </button>
                <button type="button"
                        class="btn btn-primary"
                        onclick="saveSettings()">
                    Save changes
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    function toggleShowHideMfrs() {
        mfr = $($(".mfrSettings").get().reverse());
        btn = $("#showHideMfrsButton");

        var showAllBool = btn.hasClass('showall');

        btn[0].innerText = (showAllBool ? "Select All" : "Deselect All")

        mfr.children().each(
            function (_, a) {
                a = $(a);
                if (a.hasClass('active') === showAllBool) {
                    a.button('toggle')
                }
                if (a.hasClass('focus')) {
                    a.removeClass('focus')
                }
            }
        );
        btn.toggleClass('showall');
    }

    function showHideAdvanced() {
        el = $("#advancedSettingsContainer");
        el.toggle();
        btn = $("#advancedSettingsButton");
        btn.toggleClass("active")
    }

    function saveSettings() {
        el = $("#filamentTypeSettings");
        let fs = "";

        mfr = $(".mfrSettings");
        let mfr_list = "";

        $.each(
            el.children(), function (count, value) {
                fs = fs + value.id + "-" + value.classList.contains("active") + "_";
            });

        $.each(
            mfr.children(), function (count, value) {
                if (!(value.classList.contains("active"))) {
                    mfr_list = mfr_list + value.id + "-"
                }
            });

        if (fs.includes('true') === false) {
            $.toast({
                title: 'Error!',
                content: 'It looks like all filament types have been disabled.' +
                    ' Please enable at least one type.',
                type: 'error',
                delay: 3000
            });
            return
        }

        if (mfr_list.split("-").slice(0, -1).length === mfr.children().length) {
            $.toast({
                title: 'Error!',
                content: 'It looks like all manufacturers have been disabled.' +
                    ' Please enable at least one.',
                type: 'error',
                delay: 3000
            });
            return
        }
        $.cookie('show-types', fs, {path: '/', expires: 365});

        // the radio selector
        $.cookie('show-un',
            $("#showUnavailableSetting").children()[0].classList.contains("active"),
            {path: '/', expires: 365}
        );

        $.cookie('mfr-blacklist', mfr_list, {path: '/', expires: 365});

        // settings have been saved, time to actually load them
        window.location.reload();
    }

    function loadSettings() {
        fsettings = $.cookie('show-types');
        dsetting = $.cookie('show-un');
        msettings = $.cookie('mfr-blacklist');

        {# Using a single equals for all of these kills me here, but it #}
        {# CANNOT be a !== because javascript sucks and it breaks. #}
        if (fsettings != null) {
            $.each(fsettings.split("_").slice(0, -1), function (count, value) {
                var [id, bool] = value.split('-');
                if (bool === "false") {
                    $("#filamentTypeSettings #" + id).button('toggle')
                }
            })
        }

        // default to not showing unavailable filament and toggle appropriate buttons
        if (dsetting != null) {
            if (dsetting === "false") {
                a = $("#showDC");
                a.toggleClass('active');
                a.siblings().toggleClass('active');
            }
        } else {
            a = $("#hideDC");
            a.toggleClass('active');
            a.siblings().toggleClass('active');
        }

        if (msettings != null) {
            {# a hyphen separated list of ids #}
            ids = msettings.split("-").slice(0, -1);
            $.each($(".mfrSettings").children(), function (count, value) {
                if (ids.includes(value.id.toString())) {
                    $(".mfrSettings").find('#' + value.id).button('toggle')
                }
            })
        }
    }

    $(document).ready(function () {
        loadSettings();
        // hide the advanced settings
        $("#advancedSettingsContainer").toggle()
    });
</script>
